(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const createProducts = async (products, apiKey) => {
  let productsCreated = 0;
  let terminateOnError = false;
  let result;
  const falseProducts = products.filter((e) => !e?.attributes?.id || !e?.attributes?.name);
  const correctProducts = products.filter((product) => !falseProducts.includes(product));

  for (const product of correctProducts) {
    try {
      const apiUrl = `https://vroom-api.sizey.ai/integration/shopify/product/${product.attributes.id}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-sizey-key': apiKey
        },
        body: JSON.stringify(product)
      });

      if (response.status === 401) {
        terminateOnError = true;
        throw new Error('Unauthorized');
      }

      result = await response.json();
      productsCreated++;
    } catch (error) {
      if (terminateOnError) {
        alert('Unauthorized access. Process terminated.');
        console.error(error);
        return;
      } else {
        alert(`Error creating product: see logs`);
        console.error(error);
      }
    }
  }

  if (falseProducts.length > 0) {
    const message = falseProducts.map((e) => {
      if (!e.attributes) {
        return `Product with missing attributes`;
      } else {
        return `${(e.attributes?.name || e.attributes?.id)} is falsy`;
      }
    }).join('\n');
    alert(`\n${message}`);
  }

  if (productsCreated === products.length) {
    console.log('Product created:', result);
    alert('All products have been created successfully!');
  }
};

if (document.querySelector('#sizey-sync-container')) {
  const sizeyContainer = document.querySelector('#sizey-sync-container');

  const apiKey = sizeyContainer.getAttribute('apikey');
  if (!apiKey) {
    alert('API key not provided.');
  }

  const productsDataString = sizeyContainer.getAttribute('data-products');

  try {
    const productsData = JSON.parse(productsDataString);
    if (!productsData || !Array.isArray(productsData)) {
      throw new Error('Invalid product data.');
    }

    const syncLinkText = sizeyContainer.getAttribute('sync_link_text') || 'Sync Products';
    const showAsLink = sizeyContainer.getAttribute('showaslink') === 'true';

    if (showAsLink) {
      const link = document.createElement('a');
      link.href = '#';
      link.textContent = syncLinkText;
      link.addEventListener('click', async () => {
        await createProducts(productsData, apiKey);
      });
      sizeyContainer.appendChild(link);
    } else {
      const button = document.createElement('button');
      button.textContent = syncLinkText;
      button.className = 'sync-product-button';
      button.addEventListener('click', async () => {
        await createProducts(productsData, apiKey);
      });
      sizeyContainer.appendChild(button);
    }
  } catch (error) {
    console.error('Error:', error.message);
  }
} else {
  alert('sizey-sync-container not found.');
}
},{}]},{},[1]);
